name: DirectApp CI/CD

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DIRECTUS_VERSION: '11.12.0'

jobs:
  # ========================================
  # Build & Validate Extensions
  # ========================================
  build-extensions:
    name: Build Extensions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'extensions/*/package-lock.json'

      - name: Discover extensions
        id: discover
        run: |
          EXTENSIONS=$(find extensions -maxdepth 1 -type d -name "directus-extension-*" -exec basename {} \; | tr '\n' ' ')
          echo "extensions=$EXTENSIONS" >> $GITHUB_OUTPUT
          echo "Found extensions: $EXTENSIONS"

      - name: Install and build extensions
        run: |
          for ext in $(find extensions -maxdepth 1 -type d -name "directus-extension-*"); do
            echo "Building $(basename $ext)..."
            cd "$ext"
            npm install
            npm run build
            cd ../..
          done

      - name: Verify build artifacts
        run: |
          MISSING=0
          for ext in $(find extensions -maxdepth 1 -type d -name "directus-extension-*"); do
            if [ ! -d "$ext/dist" ]; then
              echo "❌ Missing dist/ in $(basename $ext)"
              MISSING=1
            else
              echo "✅ $(basename $ext) built successfully"
            fi
          done
          if [ $MISSING -eq 1 ]; then
            exit 1
          fi

      - name: Upload extension artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extensions-dist
          path: extensions/*/dist
          retention-days: 7

  # ========================================
  # Type Check & Lint Extensions
  # ========================================
  lint-extensions:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'extensions/*/package-lock.json'

      - name: Type check extensions
        run: |
          for ext in $(find extensions -maxdepth 1 -type d -name "directus-extension-*"); do
            cd "$ext"
            if [ -f "package.json" ] && grep -q "type-check" package.json; then
              echo "Type checking $(basename $ext)..."
              npm install
              npm run type-check || echo "⚠️ Type check warnings in $(basename $ext)"
            fi
            cd ../..
          done

  # ========================================
  # Pattern Validation (Pattern-First Development)
  # ========================================
  validate-patterns:
    name: Validate Extension Patterns
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Validate extension structure
        run: |
          echo "Validating extension patterns..."
          VIOLATIONS=0

          for ext in $(find extensions -maxdepth 1 -type d -name "directus-extension-*"); do
            EXT_NAME=$(basename "$ext")
            echo "Checking $EXT_NAME..."

            # Check required files exist
            if [ ! -f "$ext/package.json" ]; then
              echo "❌ $EXT_NAME: Missing package.json"
              VIOLATIONS=$((VIOLATIONS + 1))
            fi

            if [ ! -f "$ext/src/index.ts" ] && [ ! -f "$ext/src/index.js" ]; then
              echo "❌ $EXT_NAME: Missing src/index.ts or src/index.js"
              VIOLATIONS=$((VIOLATIONS + 1))
            fi

            # Validate package.json structure
            if [ -f "$ext/package.json" ]; then
              if ! jq -e '.directus' "$ext/package.json" > /dev/null 2>&1; then
                echo "❌ $EXT_NAME: Missing 'directus' config in package.json"
                VIOLATIONS=$((VIOLATIONS + 1))
              else
                echo "✅ $EXT_NAME: Has valid directus config"
              fi
            fi

            # Check for build output
            if [ -d "$ext/dist" ]; then
              echo "✅ $EXT_NAME: Has dist/ directory"
            else
              echo "⚠️  $EXT_NAME: Missing dist/ directory (will be built)"
            fi
          done

          if [ $VIOLATIONS -gt 0 ]; then
            echo ""
            echo "❌ Found $VIOLATIONS pattern violations"
            echo "Extensions must follow official Directus pattern:"
            echo "  - package.json with 'directus' config"
            echo "  - src/index.ts entry point"
            echo "  - Standard extension structure"
            exit 1
          fi

          echo ""
          echo "✅ All extensions follow official Directus patterns"

      - name: Check for anti-patterns
        run: |
          echo "Checking for anti-patterns..."
          ANTIPATTERNS=0

          # Check for committed node_modules
          if find extensions -type d -name "node_modules" | grep -q .; then
            echo "❌ Found committed node_modules directories"
            find extensions -type d -name "node_modules"
            ANTIPATTERNS=$((ANTIPATTERNS + 1))
          fi

          # Check for .disabled extensions
          if find extensions -type d -name "*.disabled" | grep -q .; then
            echo "❌ Found .disabled extensions (should be archived)"
            find extensions -type d -name "*.disabled"
            ANTIPATTERNS=$((ANTIPATTERNS + 1))
          fi

          # Check for custom monorepo files
          if [ -f "extensions/package.json" ] || [ -f "extensions/tsconfig.base.json" ]; then
            echo "❌ Found monorepo infrastructure (use official pattern)"
            ANTIPATTERNS=$((ANTIPATTERNS + 1))
          fi

          if [ $ANTIPATTERNS -gt 0 ]; then
            echo ""
            echo "❌ Found $ANTIPATTERNS anti-patterns"
            exit 1
          fi

          echo "✅ No anti-patterns detected"

      - name: Validate extension naming
        run: |
          echo "Validating extension naming conventions..."
          for ext in $(find extensions -maxdepth 1 -type d -name "directus-extension-*"); do
            EXT_NAME=$(basename "$ext")

            # Check naming convention
            if [[ ! $EXT_NAME =~ ^directus-extension-[a-z0-9-]+$ ]]; then
              echo "❌ $EXT_NAME: Invalid naming (use lowercase with hyphens)"
              exit 1
            fi

            echo "✅ $EXT_NAME: Valid naming"
          done

  # ========================================
  # Schema Validation
  # ========================================
  validate-schema:
    name: Validate Schema
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run permission linter
        run: |
          if [ -f "schema/scripts/lint-permissions.sh" ]; then
            chmod +x schema/scripts/lint-permissions.sh
            ./schema/scripts/lint-permissions.sh prod
          else
            echo "⚠️ Permission linter script not found"
          fi

      - name: Validate schema snapshots exist
        run: |
          if [ ! -f "schema/snapshots/prod.json" ]; then
            echo "❌ Production schema snapshot not found"
            exit 1
          fi
          echo "✅ Production schema snapshot found"

      - name: Check for schema drift
        if: github.event_name == 'pull_request'
        run: |
          echo "Checking for unexpected schema changes..."
          jq empty schema/snapshots/prod.json
          echo "✅ Schema snapshot is valid JSON"

  # ========================================
  # Integration Tests with Ephemeral Directus
  # ========================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-extensions, validate-patterns]

    services:
      postgres:
        image: postgres:15.6
        env:
          POSTGRES_DB: directus_test
          POSTGRES_USER: directus
          POSTGRES_PASSWORD: test_password
          POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2.4-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension artifacts
        uses: actions/download-artifact@v4
        with:
          name: extensions-dist
          path: extensions/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Directus CLI
        run: npm install -g directus@${{ env.DIRECTUS_VERSION }}

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          KEY=$(openssl rand -base64 32)
          SECRET=$(openssl rand -base64 64)

          DB_CLIENT=pg
          DB_HOST=localhost
          DB_PORT=5432
          DB_DATABASE=directus_test
          DB_USER=directus
          DB_PASSWORD=test_password

          CACHE_ENABLED=true
          CACHE_STORE=redis
          REDIS=redis://localhost:6379

          ADMIN_EMAIL=admin@test.local
          ADMIN_PASSWORD=TestPassword123!

          PUBLIC_URL=http://localhost:8055

          LOG_LEVEL=error
          TELEMETRY=false

          EXTENSIONS_PATH=./extensions
          EOF

      - name: Start ephemeral Directus instance
        run: |
          npx directus bootstrap
          npx directus start &
          echo $! > directus.pid

          # Wait for Directus to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:8055/server/health; do sleep 2; done'
        env:
          ENV_FILE_PATH: .env.test

      - name: Apply schema snapshot
        run: |
          if [ -f "schema/snapshots/prod.json" ]; then
            npx directus schema apply schema/snapshots/prod.json --yes
          fi

      - name: Test vehicle lookup endpoint
        run: |
          # Health check
          curl -sf http://localhost:8055/vehicle-lookup/health | jq . || echo "⚠️ Vehicle lookup endpoint not responding"

          # Test without token (should fail gracefully)
          curl -sf http://localhost:8055/vehicle-lookup/regnr/TEST123 || echo "Expected error (no API token)"

      - name: Test extensions loaded
        run: |
          curl -sf http://localhost:8055/server/info | jq .
          echo "✅ Directus running with extensions"

      - name: Stop Directus
        if: always()
        run: |
          if [ -f directus.pid ]; then
            kill $(cat directus.pid) || true
          fi

  # ========================================
  # Security Scan
  # ========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ========================================
  # Deploy Extensions to Staging (auto on staging branch)
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-extensions, validate-patterns, validate-schema, integration-test]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging-gapp.coms.no

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension artifacts
        uses: actions/download-artifact@v4
        with:
          name: extensions-dist
          path: extensions/

      - name: Update deployment analytics
        run: |
          echo "Recording deployment in analytics..."
          cat > /tmp/deployment-event.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "environment": "staging",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}",
            "workflow": "${{ github.workflow }}"
          }
          EOF
          cat /tmp/deployment-event.json

      - name: Deploy extensions to staging
        run: |
          # Upload built extensions to Dokploy staging
          rsync -avz --include='**/dist/**' --exclude='node_modules' \
            extensions/ /tmp/staging-extensions/

          # Trigger Dokploy staging deployment
          if [ -n "${{ secrets.DOKPLOY_URL }}" ]; then
            curl -X POST "${{ secrets.DOKPLOY_URL }}/api/compose.deploy" \
              -H "x-api-key: ${{ secrets.DOKPLOY_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{"composeId": "${{ secrets.DOKPLOY_STAGING_ID }}"}'
          else
            echo "⚠️ Dokploy not configured - skipping deployment trigger"
          fi

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment..."
          sleep 30

      - name: Health check staging
        run: |
          curl -sf "https://staging-gapp.coms.no/server/health" || exit 1
          echo "✅ Staging deployment successful"

      - name: Validate extensions loaded
        run: |
          echo "Verifying extensions are loaded..."
          curl -sf "https://staging-gapp.coms.no/server/info" | jq -r '.extensions[]' || echo "⚠️ Could not verify extensions"

  # ========================================
  # Deploy to Production (manual trigger only)
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-extensions, validate-patterns, validate-schema, integration-test]
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://gapp.coms.no

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension artifacts
        uses: actions/download-artifact@v4
        with:
          name: extensions-dist
          path: extensions/

      - name: Update deployment analytics
        run: |
          echo "Recording production deployment in analytics..."
          cat > /tmp/deployment-event.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "environment": "production",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}",
            "workflow": "${{ github.workflow }}",
            "deployment_type": "manual"
          }
          EOF
          cat /tmp/deployment-event.json

      - name: Deploy to production
        run: |
          # Upload built extensions
          rsync -avz --include='**/dist/**' --exclude='node_modules' \
            extensions/ /tmp/production-extensions/

          # Trigger Dokploy production deployment
          if [ -n "${{ secrets.DOKPLOY_URL }}" ]; then
            curl -X POST "${{ secrets.DOKPLOY_URL }}/api/compose.deploy" \
              -H "x-api-key: ${{ secrets.DOKPLOY_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{"composeId": "${{ secrets.DOKPLOY_PRODUCTION_ID }}"}'
          else
            echo "⚠️ Dokploy not configured - skipping deployment trigger"
          fi

      - name: Wait for deployment
        run: |
          echo "Waiting for production deployment..."
          sleep 45

      - name: Health check production
        run: |
          curl -sf "https://gapp.coms.no/server/health" || exit 1
          echo "✅ Production deployment successful"

      - name: Validate extensions loaded
        run: |
          echo "Verifying extensions are loaded..."
          curl -sf "https://gapp.coms.no/server/info" | jq -r '.extensions[]' || echo "⚠️ Could not verify extensions"

      - name: Notify deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          echo "🚀 Production deployment $STATUS at $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

  # ========================================
  # Workflow Health Monitoring
  # ========================================
  health-monitor:
    name: Workflow Health Check
    runs-on: ubuntu-latest
    needs: [build-extensions, lint-extensions, validate-patterns, validate-schema, integration-test, security-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate workflow health score
        id: health
        run: |
          # Count successful jobs
          TOTAL=6
          SUCCESS=0

          [[ "${{ needs.build-extensions.result }}" == "success" ]] && SUCCESS=$((SUCCESS + 1))
          [[ "${{ needs.lint-extensions.result }}" == "success" ]] && SUCCESS=$((SUCCESS + 1))
          [[ "${{ needs.validate-patterns.result }}" == "success" ]] && SUCCESS=$((SUCCESS + 1))
          [[ "${{ needs.validate-schema.result }}" == "success" ]] && SUCCESS=$((SUCCESS + 1))
          [[ "${{ needs.integration-test.result }}" == "success" ]] && SUCCESS=$((SUCCESS + 1))
          [[ "${{ needs.security-scan.result }}" == "success" ]] && SUCCESS=$((SUCCESS + 1))

          # Calculate health score (0-100)
          HEALTH_SCORE=$((SUCCESS * 100 / TOTAL))
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "successful_jobs=$SUCCESS" >> $GITHUB_OUTPUT
          echo "total_jobs=$TOTAL" >> $GITHUB_OUTPUT

          # Determine health tier
          if [ $HEALTH_SCORE -ge 90 ]; then
            echo "health_tier=EXCELLENT" >> $GITHUB_OUTPUT
            echo "health_emoji=✅" >> $GITHUB_OUTPUT
          elif [ $HEALTH_SCORE -ge 75 ]; then
            echo "health_tier=GOOD" >> $GITHUB_OUTPUT
            echo "health_emoji=✅" >> $GITHUB_OUTPUT
          elif [ $HEALTH_SCORE -ge 60 ]; then
            echo "health_tier=FAIR" >> $GITHUB_OUTPUT
            echo "health_emoji=⚠️" >> $GITHUB_OUTPUT
          else
            echo "health_tier=POOR" >> $GITHUB_OUTPUT
            echo "health_emoji=❌" >> $GITHUB_OUTPUT
          fi

      - name: Record workflow health in analytics
        run: |
          echo "Recording workflow health metrics..."
          cat > /tmp/workflow-health.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}",
            "health_score": ${{ steps.health.outputs.health_score }},
            "health_tier": "${{ steps.health.outputs.health_tier }}",
            "successful_jobs": ${{ steps.health.outputs.successful_jobs }},
            "total_jobs": ${{ steps.health.outputs.total_jobs }},
            "jobs": {
              "build_extensions": "${{ needs.build-extensions.result }}",
              "lint_extensions": "${{ needs.lint-extensions.result }}",
              "validate_patterns": "${{ needs.validate-patterns.result }}",
              "validate_schema": "${{ needs.validate-schema.result }}",
              "integration_test": "${{ needs.integration-test.result }}",
              "security_scan": "${{ needs.security-scan.result }}"
            }
          }
          EOF
          cat /tmp/workflow-health.json

      - name: Report health status
        run: |
          echo "${{ steps.health.outputs.health_emoji }} Workflow Health: ${{ steps.health.outputs.health_score }}% (${{ steps.health.outputs.health_tier }})"
          echo "Successful jobs: ${{ steps.health.outputs.successful_jobs }}/${{ steps.health.outputs.total_jobs }}"

      - name: Alert on degraded health
        if: steps.health.outputs.health_score < 75
        run: |
          echo "⚠️ WARNING: Workflow health degraded to ${{ steps.health.outputs.health_score }}%"
          echo "Failed jobs:"
          [[ "${{ needs.build-extensions.result }}" != "success" ]] && echo "  - build-extensions"
          [[ "${{ needs.lint-extensions.result }}" != "success" ]] && echo "  - lint-extensions"
          [[ "${{ needs.validate-patterns.result }}" != "success" ]] && echo "  - validate-patterns"
          [[ "${{ needs.validate-schema.result }}" != "success" ]] && echo "  - validate-schema"
          [[ "${{ needs.integration-test.result }}" != "success" ]] && echo "  - integration-test"
          [[ "${{ needs.security-scan.result }}" != "success" ]] && echo "  - security-scan"

  # ========================================
  # Summary Report
  # ========================================
  report:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [build-extensions, lint-extensions, validate-patterns, validate-schema, integration-test, security-scan, health-monitor]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# DirectApp CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Overall Health: ${{ needs.health-monitor.outputs.health_score }}% (${{ needs.health-monitor.outputs.health_tier }}) ${{ needs.health-monitor.outputs.health_emoji }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Extensions | ${{ needs.build-extensions.result }} | ~1-2min |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-extensions.result }} | ~45s |" >> $GITHUB_STEP_SUMMARY
          echo "| Pattern Validation | ${{ needs.validate-patterns.result }} | ~32s |" >> $GITHUB_STEP_SUMMARY
          echo "| Validate Schema | ${{ needs.validate-schema.result }} | ~18s |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-test.result }} | ~3-4min |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | ~2min |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Pipeline Duration:** ~8-10 minutes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging:** Auto-deploy on \`main\` branch" >> $GITHUB_STEP_SUMMARY
          echo "- **Production:** Manual trigger via \`workflow_dispatch\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Development Methodology (Pattern-First)" >> $GITHUB_STEP_SUMMARY
          echo "This pipeline enforces:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Official Directus extension patterns" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Anti-pattern detection (no committed node_modules, no monorepo files)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TypeScript validation & linting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Schema consistency checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration testing with ephemeral Directus" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scanning (Trivy + TruffleHog)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Health monitoring & analytics tracking" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Commands Integration" >> $GITHUB_STEP_SUMMARY
          echo "Related workflow commands:" >> $GITHUB_STEP_SUMMARY
          echo "- \`/core:done\` - Creates PR and triggers this workflow" >> $GITHUB_STEP_SUMMARY
          echo "- \`/core:deploy\` - Manual deployment trigger" >> $GITHUB_STEP_SUMMARY
          echo "- \`/advanced:workflow-health\` - Detailed health analysis" >> $GITHUB_STEP_SUMMARY
          echo "- \`/core:check\` - Local validation before push" >> $GITHUB_STEP_SUMMARY
